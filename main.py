import numpy
import matplotlib.pyplot as plot
import LRC_Neural_Network_Model as nn
import sys

print("Welcome to - Twitter Comment Analysis")

# DATASET PARSING DATASET PARSING DATASET PARSING DATASET PARSING DATASET PARSING DATASET PARSING DATASET PARSING DATASET PARSING DATASET PARSING DATASET PARSING
# DATASET PARSING DATASET PARSING DATASET PARSING DATASET PARSING DATASET PARSING DATASET PARSING DATASET PARSING DATASET PARSING DATASET PARSING DATASET PARSING
# DATASET PARSING DATASET PARSING DATASET PARSING DATASET PARSING DATASET PARSING DATASET PARSING DATASET PARSING DATASET PARSING DATASET PARSING DATASET PARSING
# DATASET PARSING DATASET PARSING DATASET PARSING DATASET PARSING DATASET PARSING DATASET PARSING DATASET PARSING DATASET PARSING DATASET PARSING DATASET PARSING
# DATASET PARSING DATASET PARSING DATASET PARSING DATASET PARSING DATASET PARSING DATASET PARSING DATASET PARSING DATASET PARSING DATASET PARSING DATASET PARSING


# MODEL TRAINING MODEL TRAINING MODEL TRAINING MODEL TRAINING MODEL TRAINING MODEL TRAINING MODEL TRAINING MODEL TRAINING MODEL TRAINING MODEL TRAINING
# MODEL TRAINING MODEL TRAINING MODEL TRAINING MODEL TRAINING MODEL TRAINING MODEL TRAINING MODEL TRAINING MODEL TRAINING MODEL TRAINING MODEL TRAINING
# MODEL TRAINING MODEL TRAINING MODEL TRAINING MODEL TRAINING MODEL TRAINING MODEL TRAINING MODEL TRAINING MODEL TRAINING MODEL TRAINING MODEL TRAINING
# MODEL TRAINING MODEL TRAINING MODEL TRAINING MODEL TRAINING MODEL TRAINING MODEL TRAINING MODEL TRAINING MODEL TRAINING MODEL TRAINING MODEL TRAINING
# MODEL TRAINING MODEL TRAINING MODEL TRAINING MODEL TRAINING MODEL TRAINING MODEL TRAINING MODEL TRAINING MODEL TRAINING MODEL TRAINING MODEL TRAINING


neuralNetwork = nn.Model()
neuralNetwork.add(nn.Layer_Dense(4, 16))
neuralNetwork.add(nn.Activation_ReLU())
neuralNetwork.add(nn.Layer_Dense(16, 3))
neuralNetwork.add(nn.Activation_Softmax())
# neuralNetwork.printModelImage()
neuralNetwork.set(
    loss=nn.Loss_CategoricalCrossentropy(),
    optimizer=nn.Optimizer_Adam(decay=0),
    accuracy=nn.Accuracy_Categorical()
)
neuralNetwork.finalize()

# SVM

data = ["This game sucks ass", "NEGATIVE"]

# Neural Network
# Random Forest
# Decision Tree

# MODEL EVALUATION MODEL EVALUATION MODEL EVALUATION MODEL EVALUATION MODEL EVALUATION MODEL EVALUATION MODEL EVALUATION MODEL EVALUATION MODEL EVALUATION MODEL EVALUATION
# MODEL EVALUATION MODEL EVALUATION MODEL EVALUATION MODEL EVALUATION MODEL EVALUATION MODEL EVALUATION MODEL EVALUATION MODEL EVALUATION MODEL EVALUATION MODEL EVALUATION
# MODEL EVALUATION MODEL EVALUATION MODEL EVALUATION MODEL EVALUATION MODEL EVALUATION MODEL EVALUATION MODEL EVALUATION MODEL EVALUATION MODEL EVALUATION MODEL EVALUATION
# MODEL EVALUATION MODEL EVALUATION MODEL EVALUATION MODEL EVALUATION MODEL EVALUATION MODEL EVALUATION MODEL EVALUATION MODEL EVALUATION MODEL EVALUATION MODEL EVALUATION
# MODEL EVALUATION MODEL EVALUATION MODEL EVALUATION MODEL EVALUATION MODEL EVALUATION MODEL EVALUATION MODEL EVALUATION MODEL EVALUATION MODEL EVALUATION MODEL EVALUATION
models = []
models.append(neuralNetwork)

# X and Y for data
def evaluate_model(model, validate_X, validate_y) :
    pass

for model in models:
    # evaluate_model(model)
    pass


print("Evaluating Done:")
print("Neural Network")



print("")